
function cloneObj(aObject) {
    if (!aObject)
        return aObject
    let v;
    let bObject = Array.isArray(aObject) ? [] : {};
    for (const k in aObject) {
        v = aObject[k];
        bObject[k] = (typeof v === "object") ? cloneObj(v) : v;
    }
    return bObject;
}

function formatDefinitions(def, resp = {}) {
    if (Array.isArray(def))
        resp = { type: "array", items: {} }
    else
        resp = { type: "object", properties: {} }
    Object.entries(def).forEach(elem => {
        if (typeof elem[1] === 'object') {  // Array or object
            if (resp.type == 'array') {
                resp.items = { ...formatDefinitions(elem[1], resp) }
            } else
                resp.properties[elem[0]] = formatDefinitions(elem[1], resp)
        } else {
            if (resp.type == 'array')
                resp.items.properties[elem[0]] = { type: typeof elem[1] }
            else {
                if (elem[0][0] == '$') {  // Required parameter
                    elem[0] = elem[0].slice(1)
                    if (!resp.required)
                        resp.required = []
                    resp.required.push(elem[0])
                }
                resp.properties[elem[0]] = { type: typeof elem[1], example: elem[1] }
            }
        }
    })
    return resp
}

const doc = {
    info: {
        version: "1.0.0",
        title: "My API",
        description: "Documentation automatically generated by the <b>swagger.autogen</b> module."
    },
    host: "localhost:3000",
    basePath: "/",
    schemes: ['http', 'https'],
    consumes: ['application/json'],
    produces: ['application/json'],
    tags: [
        {
            "name": "User",
            "description": "Endpoints"
        }
    ],
    securityDefinitions: {
        api_key: {
            type: "apiKey",
            name: "api_key",
            in: "header"
        },
        petstore_auth: {
            type: "oauth2",
            authorizationUrl: "https://petstore.swagger.io/oauth/authorize",
            flow: "implicit",
            scopes: {
                read_pets: "read your pets",
                write_pets: "modify pets in your account"
            }
        }
    },
    definitions: {
        User: {
            name: "Jhon Doe",
            age: 29,
            parents: {
                father: "Simon Doe",
                mother: "Marie Doe"
            },
            diplomas: [
                {
                    school: "XYZ University",
                    year: 2020,
                    completed: true,
                    internship: {
                        hours: 290,
                        location: "XYZ Company"
                    }
                }
            ]
        },
        AddUser: {
            $name: "Jhon Doe",
            $age: 29,
            about: ""
        }
    }
}


const expectedPaths = {
    "/automatic/user/{id}": {
        "get": {
            "tags": [],
            "description": "",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true
                },
                {
                    "name": "obj",
                    "in": "query"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "produces": [
                "application/json"
            ]
        }
    },
    "/automatic/user": {
        "post": {
            "tags": [],
            "description": "",
            "parameters": [
                {
                    "name": "obj",
                    "in": "query"
                }
            ],
            "responses": {
                "201": {
                    "description": "Created"
                },
                "500": {
                    "description": "Internal Server Error"
                }
            },
            "produces": [
                "application/xml"
            ]
        }
    },
    "/automatic_and_incremented/user/{id}": {
        "get": {
            "tags": [
                "User"
            ],
            "description": "Endpoint to get the specific user.",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "User registered successfully.",
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "produces": [
                "application/json"
            ]
        },
        "delete": {
            "tags": [
                "User"
            ],
            "description": "",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User ID."
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "404": {
                    "description": "Not Found"
                }
            }
        }
    },
    "/automatic_and_incremented/user": {
        "post": {
            "tags": [
                "User"
            ],
            "description": "Endpoint to add a user.",
            "parameters": [
                {
                    "name": "obj",
                    "in": "body",
                    "description": "User information.",
                    "required": true,
                    "type": "object",
                    "schema": {
                        "$ref": "#/definitions/AddUser"
                    }
                }
            ],
            "responses": {
                "201": {
                    "description": "User registered successfully."
                },
                "500": {
                    "description": "Internal Server Error"
                }
            },
            "produces": [
                "application/xml"
            ]
        }
    },
    "/manual/user/{id}": {
        "patch": {
            "tags": [],
            "description": "Endpoint added manually.",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "User ID.",
                    "required": true
                },
                {
                    "name": "obj",
                    "in": "query",
                    "description": "User information.",
                    "required": true,
                    "type": "string"
                }
            ],
            "responses": {
                "200": {
                    "schema": {
                        "$ref": "#/definitions/User"
                    },
                    "description": "User found."
                },
                "500": {
                    "description": "Server Failure."
                }
            },
            "auto": false,
            "produces": [
                "application/json"
            ],
            "consumes": [
                "application/json"
            ]
        }
    },
    "/security": {
        "head": {
            "tags": [],
            "description": "",
            "parameters": [
                {
                    "name": "obj",
                    "in": "query"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "security": [
                {
                    "petstore_auth": [
                        "write_pets",
                        "read_pets"
                    ]
                }
            ],
            "produces": [
                "application/json"
            ]
        }
    },
    "/forcedEndpoint/{id}": {
        "put": {
            "tags": [],
            "description": "Forced endpoint.",
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "User ID."
                },
                {
                    "name": "obj",
                    "in": "body",
                    "description": "User information.",
                    "type": "object",
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "Jhon Doe"
                            },
                            "age": {
                                "type": "number",
                                "example": 29
                            },
                            "about": {
                                "type": "string",
                                "example": ""
                            }
                        },
                        "required": [
                            "name",
                            "age"
                        ]
                    }
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "404": {
                    "description": "Not Found"
                }
            },
            "produces": [
                "application/json"
            ]
        }
    }
}


module.exports = {
    doc,
    expectedPaths,
    cloneObj,
    formatDefinitions
}